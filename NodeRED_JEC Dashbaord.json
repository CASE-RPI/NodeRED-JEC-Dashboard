[
    {
        "id": "26da735de1732a61",
        "type": "tab",
        "label": "Jiayu_Room Monitoring Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fc77758cca192ae2",
        "type": "group",
        "z": "26da735de1732a61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d185aaac5c6e4f71",
            "07e7fa52a486232f",
            "d108b4e25fcfa347",
            "465f40e8dd6410bb",
            "b553c8af6dbe9f40",
            "521cfda58ad17724",
            "1a0a4d7d630957f4",
            "b4e169032652493e",
            "0ab900b6ad316125"
        ],
        "x": 354,
        "y": 639,
        "w": 1192,
        "h": 202
    },
    {
        "id": "c113d5384fa3e4e0",
        "type": "group",
        "z": "26da735de1732a61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ad125bef5c99a26c",
            "781475f11c140d9b",
            "6519f1592910075b",
            "c7dda973e9c6bd98",
            "82f3d5f174848740",
            "cd3e361181e65455",
            "75a4be9d23ef53ea"
        ],
        "x": 354,
        "y": 279,
        "w": 1192,
        "h": 122
    },
    {
        "id": "37c82c90783e64c0",
        "type": "group",
        "z": "26da735de1732a61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2074bedc89b54f3c",
            "10bc210c28f38aff",
            "daa0d2bd3ea054e1",
            "82837af3e2fae332",
            "6f48dba852c3e6a8",
            "37bd69a30e31adec"
        ],
        "x": 354,
        "y": 479,
        "w": 1132,
        "h": 82
    },
    {
        "id": "f791d6872a4d4e43",
        "type": "group",
        "z": "26da735de1732a61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4a3b0530a68b0e52",
            "5d08f3112d4b2a1b",
            "a633d013ba80721d",
            "0c408e34721062ee",
            "a2debed5f0817f7e",
            "1e93216fb606aa0b"
        ],
        "x": 354,
        "y": 919,
        "w": 1152,
        "h": 82
    },
    {
        "id": "43b0de8a81097d75",
        "type": "ui_chart",
        "z": "26da735de1732a61",
        "name": "Temperature Trends",
        "group": "history_group",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Temperature Trends (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "bezier",
        "nodata": "No Data",
        "dot": false,
        "ymin": 0,
        "ymax": 50,
        "removeOlder": "6",
        "removeOlderPoints": "30",
        "removeOlderUnit": "3600",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1720,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "c90bd06ca7468aa4",
        "type": "ui_text",
        "z": "26da735de1732a61",
        "group": "dashboard-group",
        "order": 2,
        "width": 20,
        "height": 2,
        "name": "Alerts",
        "label": "Alerts",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 450,
        "y": 180,
        "wires": []
    },
    {
        "id": "79463a5ccf38472d",
        "type": "ui_text",
        "z": "26da735de1732a61",
        "group": "dashboard-group",
        "order": 4,
        "width": 8,
        "height": 1,
        "name": "Last Updated",
        "label": "Last Updated",
        "format": "{{payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "32adfd3a2e08ec12",
        "type": "ui_button",
        "z": "26da735de1732a61",
        "name": "Refresh",
        "group": "dashboard-group",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Refresh Data",
        "tooltip": "",
        "color": "#FFFFFF",
        "bgcolor": "#555555",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 960,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8923071d73054600",
        "type": "ui_gauge",
        "z": "26da735de1732a61",
        "name": "Room CO2",
        "group": "occupancy_group",
        "order": 7,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "CO2 (ppm)",
        "label": "PPM",
        "format": "{{payload}}",
        "min": 0,
        "max": "2500",
        "colors": [
            "#cae1ef",
            "#7bacd2",
            "#324c7c"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1690,
        "y": 760,
        "wires": []
    },
    {
        "id": "008c9113a14cc2dc",
        "type": "ui_chart",
        "z": "26da735de1732a61",
        "name": "CO2 Trends",
        "group": "history_group",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "CO2 Trends (ppm)",
        "chartType": "line",
        "legend": true,
        "xformat": "auto",
        "interpolate": false,
        "nodata": "No Data",
        "dot": false,
        "ymin": 0,
        "ymax": "2500",
        "removeOlder": "6",
        "removeOlderPoints": "30",
        "removeOlderUnit": "3600",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1690,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "57beae3ea9e5b73e",
        "type": "ui_switch",
        "z": "26da735de1732a61",
        "name": "",
        "label": "Fan Status",
        "tooltip": "",
        "group": "dashboard-group",
        "order": 3,
        "width": 7,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 790,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "75a4be9d23ef53ea",
        "type": "ui_dropdown",
        "z": "26da735de1732a61",
        "g": "c113d5384fa3e4e0",
        "name": "Select Option 1",
        "label": "Classroom",
        "tooltip": "",
        "place": "Select a humdity sensor",
        "group": "occupancy_group",
        "order": 1,
        "width": 16,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 1200,
        "y": 340,
        "wires": [
            [
                "c7dda973e9c6bd98",
                "82f3d5f174848740"
            ]
        ]
    },
    {
        "id": "0ab900b6ad316125",
        "type": "ui_dropdown",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "Select Option 2",
        "label": "Classroom",
        "tooltip": "",
        "place": "Select a CO2 sensor",
        "group": "occupancy_group",
        "order": 4,
        "width": 16,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 1180,
        "y": 700,
        "wires": [
            [
                "b553c8af6dbe9f40",
                "521cfda58ad17724",
                "1a0a4d7d630957f4",
                "b4e169032652493e",
                "d8233c7e90ba722b"
            ]
        ]
    },
    {
        "id": "6765d0d998fbd4d2",
        "type": "ui_gauge",
        "z": "26da735de1732a61",
        "name": "Room Temperature 2",
        "group": "occupancy_group",
        "order": 5,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature (°C)",
        "label": "°C",
        "format": "{{payload}}",
        "min": 0,
        "max": 50,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1720,
        "y": 720,
        "wires": []
    },
    {
        "id": "21558d9b3abd0160",
        "type": "ui_gauge",
        "z": "26da735de1732a61",
        "name": "Room Humidity 2",
        "group": "occupancy_group",
        "order": 6,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity (%)",
        "label": "%",
        "format": "{{payload}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1710,
        "y": 680,
        "wires": []
    },
    {
        "id": "d8bf029c4b11cdb6",
        "type": "ui_gauge",
        "z": "26da735de1732a61",
        "name": "Pressure (Pa)",
        "group": "occupancy_group",
        "order": 8,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Room Pressure",
        "label": "Pa",
        "format": "{{payload}}",
        "min": "90000",
        "max": "110000",
        "colors": [
            "#cae1ef",
            "#7badd2",
            "#324c7c"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1700,
        "y": 800,
        "wires": []
    },
    {
        "id": "6d9c038fc8fecb6a",
        "type": "ui_gauge",
        "z": "26da735de1732a61",
        "name": "Room Temperature 1",
        "group": "occupancy_group",
        "order": 2,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature (°C)",
        "label": "°C",
        "format": "{{payload}}",
        "min": 0,
        "max": 50,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1660,
        "y": 360,
        "wires": []
    },
    {
        "id": "3ef0564f3b77a2d1",
        "type": "inject",
        "z": "26da735de1732a61",
        "name": "Interval 15 min",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "project",
                "v": "cn39e25vkss3h69meaqg",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "x": 240,
        "y": 340,
        "wires": [
            [
                "ad125bef5c99a26c"
            ]
        ]
    },
    {
        "id": "84bac84648c56fda",
        "type": "inject",
        "z": "26da735de1732a61",
        "name": "Interval 5 min",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "project",
                "v": "cn39e25vkss3h69meaqg",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "x": 240,
        "y": 700,
        "wires": [
            [
                "d185aaac5c6e4f71"
            ]
        ]
    },
    {
        "id": "b7c0b71ade44741c",
        "type": "comment",
        "z": "26da735de1732a61",
        "name": "Template to retrieve data from a proximity sensor",
        "info": "",
        "x": 520,
        "y": 440,
        "wires": []
    },
    {
        "id": "bb931267b5be44e2",
        "type": "comment",
        "z": "26da735de1732a61",
        "name": "Template to retrieve data from a CO2 sensor",
        "info": "",
        "x": 510,
        "y": 600,
        "wires": []
    },
    {
        "id": "d185aaac5c6e4f71",
        "type": "http request",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "Request to DT API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.d21s.com/v2/projects/cn39e25vkss3h69meaqg/devices",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 700,
        "wires": [
            [
                "07e7fa52a486232f"
            ]
        ]
    },
    {
        "id": "07e7fa52a486232f",
        "type": "json",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 700,
        "wires": [
            [
                "d108b4e25fcfa347"
            ]
        ]
    },
    {
        "id": "d108b4e25fcfa347",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "Select CO2 sensors",
        "func": "p = msg.payload;\nselectType = \"co2\"\nselectedSensors = p.devices.filter(i => i.type == selectType);\nmsg.payload = selectedSensors\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 700,
        "wires": [
            [
                "465f40e8dd6410bb"
            ]
        ]
    },
    {
        "id": "465f40e8dd6410bb",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "Select a sensor",
        "func": "p = msg.payload;\nprojectID = msg.project;\n\noutput = [];\nfor (let i = 0; i < p.length; i++) {\n    newObj = {};\n    sensorLable = p[i].labels.name;\n    sensorID = p[i].name.split('/')[3];\n    newObj[sensorLable] = \"projects/\"+projectID+\"/devices/\"+sensorID;\n    output.push(newObj);\n}\n\nmsg.options = output;\nflow.set(\"co2Sensors\",p);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 700,
        "wires": [
            [
                "0ab900b6ad316125"
            ]
        ]
    },
    {
        "id": "b553c8af6dbe9f40",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "Get humidity data",
        "func": "p = msg.payload;\nhumidSensors = flow.get(\"co2Sensors\");\nselectedSensor = humidSensors.filter(i => i.name == p);\nmsg.payload = selectedSensor[0].reported.humidity.relativeHumidity;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 680,
        "wires": [
            [
                "21558d9b3abd0160",
                "ff1c2c0d207e04b0"
            ]
        ]
    },
    {
        "id": "521cfda58ad17724",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "Get temperature data",
        "func": "p = msg.payload;\nhumidSensors = flow.get(\"co2Sensors\");\nselectedSensor = humidSensors.filter(i => i.name == p);\nmsg.payload = selectedSensor[0].reported.humidity.temperature;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 720,
        "wires": [
            [
                "6765d0d998fbd4d2",
                "43b0de8a81097d75"
            ]
        ]
    },
    {
        "id": "1a0a4d7d630957f4",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "Get CO2 data",
        "func": "p = msg.payload;\nhumidSensors = flow.get(\"co2Sensors\");\nselectedSensor = humidSensors.filter(i => i.name == p);\nmsg.payload = selectedSensor[0].reported.co2.ppm;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 760,
        "wires": [
            [
                "8923071d73054600",
                "008c9113a14cc2dc"
            ]
        ]
    },
    {
        "id": "b4e169032652493e",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "fc77758cca192ae2",
        "name": "Get Pressure data",
        "func": "p = msg.payload;\nhumidSensors = flow.get(\"co2Sensors\");\nselectedSensor = humidSensors.filter(i => i.name == p);\nmsg.payload = selectedSensor[0].reported.pressure.pascal;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 800,
        "wires": [
            [
                "d8bf029c4b11cdb6"
            ]
        ]
    },
    {
        "id": "ad125bef5c99a26c",
        "type": "http request",
        "z": "26da735de1732a61",
        "g": "c113d5384fa3e4e0",
        "name": "Request to DT API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.d21s.com/v2/projects/cn39e25vkss3h69meaqg/devices",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 340,
        "wires": [
            [
                "781475f11c140d9b"
            ]
        ]
    },
    {
        "id": "781475f11c140d9b",
        "type": "json",
        "z": "26da735de1732a61",
        "g": "c113d5384fa3e4e0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 340,
        "wires": [
            [
                "6519f1592910075b"
            ]
        ]
    },
    {
        "id": "6519f1592910075b",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "c113d5384fa3e4e0",
        "name": "Select humidity sensors",
        "func": "p = msg.payload;\nselectType = \"humidity\"\nselectedSensors = p.devices.filter(i => i.type == selectType);\nmsg.payload = selectedSensors\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 340,
        "wires": [
            [
                "cd3e361181e65455"
            ]
        ]
    },
    {
        "id": "c7dda973e9c6bd98",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "c113d5384fa3e4e0",
        "name": "Get humidity data",
        "func": "p = msg.payload;\nhumidSensors = flow.get(\"humidSensors\");\nselectedSensor = humidSensors.filter(i => i.name == p);\nmsg.payload = selectedSensor[0].reported.humidity.relativeHumidity;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 320,
        "wires": [
            [
                "a3528174dcf150b2"
            ]
        ]
    },
    {
        "id": "82f3d5f174848740",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "c113d5384fa3e4e0",
        "name": "Get temperature data",
        "func": "p = msg.payload;\nhumidSensors = flow.get(\"humidSensors\");\nselectedSensor = humidSensors.filter(i => i.name == p);\nmsg.payload = selectedSensor[0].reported.humidity.temperature;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 360,
        "wires": [
            [
                "6d9c038fc8fecb6a"
            ]
        ]
    },
    {
        "id": "4ae6b89d3b14bdbd",
        "type": "ui_chart",
        "z": "26da735de1732a61",
        "name": "Proximity Data Chart",
        "group": "history_group",
        "order": 4,
        "width": 8,
        "height": 5,
        "label": "Door Status",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "No data yet",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "3",
        "removeOlderPoints": "15",
        "removeOlderUnit": "3600",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1600,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2074bedc89b54f3c",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "37c82c90783e64c0",
        "name": "function 1",
        "func": "p = msg.payload;\nif (p ==\"PRESENT\"){\n    output = 0;\n} else {\n    output = 1;\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 520,
        "wires": [
            [
                "4ae6b89d3b14bdbd"
            ]
        ]
    },
    {
        "id": "10bc210c28f38aff",
        "type": "http request",
        "z": "26da735de1732a61",
        "g": "37c82c90783e64c0",
        "name": "Request to DT API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.d21s.com/v2/projects/cn39e25vkss3h69meaqg/devices",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 520,
        "wires": [
            [
                "daa0d2bd3ea054e1"
            ]
        ]
    },
    {
        "id": "daa0d2bd3ea054e1",
        "type": "json",
        "z": "26da735de1732a61",
        "g": "37c82c90783e64c0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 520,
        "wires": [
            [
                "82837af3e2fae332"
            ]
        ]
    },
    {
        "id": "82837af3e2fae332",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "37c82c90783e64c0",
        "name": "Select proximity sensors",
        "func": "p = msg.payload;\nselectType = \"proximity\"\nselectedSensors = p.devices.filter(i => i.type == selectType);\nmsg.payload = selectedSensors\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 520,
        "wires": [
            [
                "6f48dba852c3e6a8"
            ]
        ]
    },
    {
        "id": "6f48dba852c3e6a8",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "37c82c90783e64c0",
        "name": "Select a sensor",
        "func": "p = msg.payload;\nprojectID = msg.project\nselectID = \"c8k9otj94vs0008a8mgg\"\nsensorName = \"projects/\"+projectID+\"/devices/\"+selectID\nselectedSensor = p.filter(i => i.name == sensorName);\nmsg.payload = selectedSensor\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 520,
        "wires": [
            [
                "37bd69a30e31adec"
            ]
        ]
    },
    {
        "id": "37bd69a30e31adec",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "37c82c90783e64c0",
        "name": "Get proximity data",
        "func": "p = msg.payload;\nmsg.payload = p[0].reported.objectPresent.state;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 520,
        "wires": [
            [
                "2074bedc89b54f3c"
            ]
        ]
    },
    {
        "id": "ff1c2c0d207e04b0",
        "type": "ui_chart",
        "z": "26da735de1732a61",
        "name": "Humidity Trends",
        "group": "history_group",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Humidity Trends (%)",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "bezier",
        "nodata": "Humidity",
        "dot": false,
        "ymin": 0,
        "ymax": 50,
        "removeOlder": "6",
        "removeOlderPoints": "30",
        "removeOlderUnit": "3600",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1700,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "a3528174dcf150b2",
        "type": "ui_gauge",
        "z": "26da735de1732a61",
        "name": "Room Humidity 1",
        "group": "occupancy_group",
        "order": 3,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity (%)",
        "label": "%",
        "format": "{{payload}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1650,
        "y": 320,
        "wires": []
    },
    {
        "id": "cd3e361181e65455",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "c113d5384fa3e4e0",
        "name": "Select a sensor",
        "func": "p = msg.payload;\nprojectID = msg.project;\n\noutput = [];\nfor (let i = 0; i < p.length; i++) {\n    newObj = {};\n    sensorLable = p[i].labels.name;\n    sensorID = p[i].name.split('/')[3];\n    newObj[sensorLable] = \"projects/\"+projectID+\"/devices/\"+sensorID;\n    output.push(newObj);\n}\n\nmsg.options = output;\nflow.set(\"humidSensors\",p);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "75a4be9d23ef53ea"
            ]
        ]
    },
    {
        "id": "84e461413d9cee8b",
        "type": "inject",
        "z": "26da735de1732a61",
        "name": "Interval 1 min",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "project",
                "v": "cn39e25vkss3h69meaqg",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "x": 220,
        "y": 960,
        "wires": [
            [
                "a633d013ba80721d",
                "10bc210c28f38aff"
            ]
        ]
    },
    {
        "id": "5a417facc7db1a38",
        "type": "comment",
        "z": "26da735de1732a61",
        "name": "Template to retrieve data from a motion sensor",
        "info": "",
        "x": 510,
        "y": 880,
        "wires": []
    },
    {
        "id": "4a3b0530a68b0e52",
        "type": "json",
        "z": "26da735de1732a61",
        "g": "f791d6872a4d4e43",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 960,
        "wires": [
            [
                "5d08f3112d4b2a1b"
            ]
        ]
    },
    {
        "id": "5d08f3112d4b2a1b",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "f791d6872a4d4e43",
        "name": "Select motion sensors",
        "func": "p = msg.payload;\nselectType = \"motion\"\nselectedSensors = p.devices.filter(i => i.type == selectType);\nmsg.payload = selectedSensors\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 960,
        "wires": [
            [
                "1e93216fb606aa0b"
            ]
        ]
    },
    {
        "id": "a633d013ba80721d",
        "type": "http request",
        "z": "26da735de1732a61",
        "g": "f791d6872a4d4e43",
        "name": "Request to DT API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.d21s.com/v2/projects/cn39e25vkss3h69meaqg/devices",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 960,
        "wires": [
            [
                "4a3b0530a68b0e52"
            ]
        ]
    },
    {
        "id": "0c408e34721062ee",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "f791d6872a4d4e43",
        "name": "Get motion data",
        "func": "// p = msg.payload;\n// motionSensors = flow.get(\"motionSensors\");\n// selectedSensor = motionSensors.filter(i => i.name == p);\n// strState = selectedSensor[0].reported.motion.state;\n\n\np = msg.payload;\noccHeatmap = flow.get(\"occHeatmap\");//(p.replace(/ /g, ''));\nselectedHeatmap = occHeatmap[p];//occHeatmap.data//occHeatmap.filter(i => i.name == p);\n\n\nmsg.payload = {data_tmp: selectedHeatmap};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 960,
        "wires": [
            [
                "6f9f0be062babbe3"
            ]
        ]
    },
    {
        "id": "a2debed5f0817f7e",
        "type": "ui_dropdown",
        "z": "26da735de1732a61",
        "g": "f791d6872a4d4e43",
        "name": "Select Option 3",
        "label": "Classroom",
        "tooltip": "",
        "place": "Select a Montion sensor",
        "group": "2ac311dfb33c8749",
        "order": 1,
        "width": 16,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 1200,
        "y": 960,
        "wires": [
            [
                "0c408e34721062ee"
            ]
        ]
    },
    {
        "id": "d8233c7e90ba722b",
        "type": "function",
        "z": "26da735de1732a61",
        "name": "Get humidity data",
        "func": "p = msg.payload;\nhumidSensors = flow.get(\"co2Sensors\");\nselectedSensor = humidSensors.filter(i => i.name == p);\nutcDatetime = new Date(selectedSensor[0].reported.co2.updateTime);\nnycDatetime = new Date(utcDatetime.toLocaleString(\"en-US\", { timeZone: \"America/New_York\" }));\n\nmsg.payload= [utcDatetime, nycDatetime];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "6f9f0be062babbe3",
        "type": "ui_template",
        "z": "26da735de1732a61",
        "group": "2ac311dfb33c8749",
        "name": "Occupancy heat map",
        "order": 3,
        "width": 16,
        "height": 6,
        "format": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js\"\n  integrity=\"sha512-2L0h0GhoIHQEjti/1KwfjcbyaTHy+hPPhE1o5wTCmviYcPO/TD9oZvUxFQtWvBkCSTIpt+fjsx1CCx6ekb51gw==\"\n  crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n<center style=\"overflow:hidden;\">\n  <div id=\"main\" style=\"width: 800px;height:400px;\"></div>\n</center>\n<script type=\"text/javascript\">\nfunction generateRandom(maxLimit = 60){\n  let rand = Math.random() * maxLimit;\n  rand = Math.floor(rand); // 99\n\n  return rand;\n}\n\n  (function(scope) {\n    var timer = setInterval(function() {\n      if (!window.echarts) return;\n      clearInterval(timer);\n      var myChart = echarts.init(document.getElementById('main'));\n\n      // Define timeSlots and days\n      var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      var timeSlots = ['8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM'];\n\n      // Heatmap data format: [time index, day index, value]\n    //   var data_tmp = [\n    //     [0, 0, 1], [0, 1, 4], [0, 2, 4], [0, 3, 4], [0, 4, 12], [0, 5, 12], [0, 6, 12],\n    //     [1, 0, 1], [1, 1, 34], [1, 2, 34], [1, 3, 44], [1, 4, 82], [1, 5, 12], [1, 6, 22],\n    //     [2, 0, 1], [2, 1, 4], [2, 2, 12], [2, 3, 5], [2, 4, 34], [2, 5, 12], [2, 6, 23],\n    //     [3, 0, 11], [3, 1, 24], [3, 2, 67], [3, 3, 52], [3, 4, 0], [3, 5, 16], [3, 6, 34],\n    //   ];\n        var data_tmp = []\n        const nRows = 11;\n        const nCols = 7;\n        const value = 0\n    \n        for (let row = 0; row < nRows; row++) {\n            for (let col = 0; col < nCols; col++) {\n                const value = 0;\n                data_tmp.push([col, row, generateRandom()]);\n            }\n        }\n\n\n      // Specify the configuration items and data for the chart\n      var option = {\n        tooltip: {\n          position: 'middle'\n        },\n        grid: {\n          height: '50%',\n          top: '5%'\n        },\n        xAxis: {\n          type: 'category',\n          data: days,\n          splitArea: {\n            show: true\n          }\n        },\n        yAxis: {\n          type: 'category',\n          data: timeSlots,\n          splitArea: {\n            show: true\n          }\n        },\n        textStyle: {\n          color: 'white'\n        },\n        visualMap: {\n          min: 0,\n          max: 60,\n          calculable: false,\n          orient: 'vertical',\n          right: '3%',\n          bottom: '50%',\n          textStyle: { color: \"white\" },\n          inRange: {\n            color: [\"#d0e4ff\", \"#a4c8e1\", \"#78a2b0\", \"#4c7a90\", \"#2e596e\", \"#1b404f\", \"#0c292c\"]  // Shades of blue\n          },\n        },\n        series: [\n          {\n            name: 'Occupancy',\n            type: 'heatmap',\n            data: data_tmp,\n            label: {\n              show: true\n            },\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }\n        ]\n      };\n\n      // Display the chart using the configuration items and data just specified.\n      myChart.setOption(option);\n      scope.$watch('msg', function(msg) { // watch for an incoming NR msg\n        if (msg) {\n          myData = msg.payload;\n          option = {\n            tooltip: {\n              position: 'top'\n            },\n            grid: {\n              height: '50%',\n              top: '5%'\n            },\n            xAxis: {\n              type: 'category',\n              data: days,\n              splitArea: {\n                show: true\n              }\n            },\n            textStyle: {\n              color: 'white'\n            },\n            yAxis: {\n              type: 'category',\n              data: timeSlots,\n              splitArea: {\n                show: true\n              }\n            },\n            visualMap: {\n              min: 0,\n              max: 60,\n              calculable: false,\n              orient: 'vertical',\n              right: '3%',\n              bottom: '50%',\n              textStyle: { color: \"white\" },\n              inRange: {\n                color: [\"#d0e4ff\", \"#a4c8e1\", \"#78a2b0\", \"#4c7a90\", \"#2e596e\", \"#1b404f\", \"#0c292c\"]  // Shades of blue\n              },\n            },\n            series: [\n              {\n                name: 'Utilization',\n                type: 'heatmap',\n                color: 'black',\n                data: myData.data_tmp,\n                label: {\n                  show: true\n                },\n                emphasis: {\n                  itemStyle: {\n                    shadowBlur: 10,\n                    shadowColor: 'rgba(0, 0, 0, 0.5)'\n                  }\n                }\n              }\n            ]\n          };\n\n          // Display the chart using the configuration items and data just specified.\n          myChart.setOption(option);\n        }\n      });\n    }, 100);\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1620,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "1e93216fb606aa0b",
        "type": "function",
        "z": "26da735de1732a61",
        "g": "f791d6872a4d4e43",
        "name": "Select a sensor",
        "func": "p = msg.payload;\nprojectID = msg.project;\n\noutput = [];\nfor (let i = 0; i < p.length; i++) {\n    newObj = {};\n    sensorLabel = p[i].labels.name;\n    sensorID = p[i].name.split('/')[3];\n    newObj[sensorLabel] = sensorLabel;//\"projects/\"+projectID+\"/devices/\"+sensorID;\n    output.push(newObj);\n}\n\nmsg.options = output;\nflow.set(\"motionSensors\",p);\n\n\n////////////////////////////\n\n\n\n// Get the current timestamp\nconst now = Date.now();\n\n// Create a Date object\nconst date = new Date(now);\n\n// Format to NYC time with the day of the week\nconst formatter = new Intl.DateTimeFormat(\"en-US\", {\n  timeZone: \"America/New_York\",\n  year: \"numeric\",\n  month: \"2-digit\",\n  day: \"2-digit\",\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  second: \"2-digit\",\n  hour12: false,\n  weekday: \"long\", // Add weekday to formatter\n});\n\n// Get the formatted New York time parts\nconst parts = formatter.formatToParts(date);\n\n// Manually add the day of the week as fallback\nconst daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n\n// Extract NYC time parts\nconst nycDateParts = {\n  year: parts.find(p => p.type === \"year\").value,\n  month: parts.find(p => p.type === \"month\").value,\n  day: parts.find(p => p.type === \"day\").value,\n  hour: parts.find(p => p.type === \"hour\").value,\n  minute: parts.find(p => p.type === \"minute\").value,\n  second: parts.find(p => p.type === \"second\").value,\n  strWeekday: parts.find(p => p.type === \"weekday\").value, // Extract weekday if available\n  numWeekday: date.getDay()\n};\n\n\ninput = {\n    \"Motion in JEC 6027 West Side Wall\": 1,\n    \"Motion in JEC 6012 West Side Wall (Whiteboard)\": 0,\n    \"Motion in JEC 6012 East Side Wall\": 0\n}\n\n//////////////////////////////\n\nif (flow.get(\"occHeatmap\")) {\n    const curHour = Number(nycDateParts.hour);\n    const curDay = nycDateParts.numWeekday;\n    const idxHour = curHour - 8;\n\n    if (curHour >= 8 && curHour <= 18) {\n        const outOccHeatmap = JSON.parse(JSON.stringify(flow.get(\"occHeatmap\")));\n        \n        for (let i = 0; i < p.length; i++) {\n            const sensorLabel = p[i].labels.name;\n            const sensorValue = p[i].reported.motion.state;\n            const sensorState = (sensorValue == 'NO_MOTION_DETECTED') ? 0 : 1;//input[sensorLabel];//1;\n            var selectedSensor = outOccHeatmap[sensorLabel];\n            \n            selectedSensor.find(item => item[0] === curDay && item[1] === idxHour)[2] += sensorState;\n        }\n        flow.set(\"occHeatmap\", outOccHeatmap);\n    }\n    \n} else {\n    var outOccHeatmap = {}\n    var data_tmp = []\n    const nRows = 11;\n    const nCols = 7;\n    var value = 0\n\n    for (let row = 0; row < nRows; row++) {\n        for (let col = 0; col < nCols; col++) {\n            value = 0;\n            data_tmp.push([col, row, value]);\n        }\n    }\n\n    for (let i = 0; i < p.length; i++) {\n        const sensorLabel = p[i].labels.name;\n        outOccHeatmap[sensorLabel] = data_tmp;\n    }\n    flow.set(\"occHeatmap\", outOccHeatmap);\n}\n///\n\nmsg.payload = flow.get(\"occHeatmap\"); //outOccHeatmap; //flow.get(\"motionSensors\");\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 960,
        "wires": [
            [
                "a2debed5f0817f7e"
            ]
        ]
    },
    {
        "id": "10b625c0b626df38",
        "type": "http in",
        "z": "26da735de1732a61",
        "name": "",
        "url": "BIM_JEC-building",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 520,
        "y": 240,
        "wires": [
            [
                "13ad41b0d3059901"
            ]
        ]
    },
    {
        "id": "e471a47595563249",
        "type": "http response",
        "z": "26da735de1732a61",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 240,
        "wires": []
    },
    {
        "id": "13ad41b0d3059901",
        "type": "ui_template",
        "z": "26da735de1732a61",
        "group": "dashboard-group",
        "name": "",
        "order": 1,
        "width": 20,
        "height": 18,
        "format": "<iframe title=\"Speckle\" src=\"https://app.speckle.systems/projects/58be77f11c/models/58dca139d8#embed={\"isEnabled\"%3Atrue}\" width=\"1040\" height=\"1040\" frameborder=\"0\"></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 700,
        "y": 240,
        "wires": [
            [
                "e471a47595563249"
            ]
        ]
    },
    {
        "id": "history_group",
        "type": "ui_group",
        "name": "History Trend",
        "tab": "7f7afbe1d0375911",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dashboard-group",
        "type": "ui_group",
        "name": "BIM Viewer",
        "tab": "7f7afbe1d0375911",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "occupancy_group",
        "type": "ui_group",
        "name": "Indoor Environmental Quality",
        "tab": "7f7afbe1d0375911",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2ac311dfb33c8749",
        "type": "ui_group",
        "name": "Occupancy Records",
        "tab": "7f7afbe1d0375911",
        "order": 3,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7f7afbe1d0375911",
        "type": "ui_tab",
        "name": "JEC Digital Twin Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]